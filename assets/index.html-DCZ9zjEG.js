import{_ as a,o as e,c as n,a as t}from"./app-CNRroVhM.js";const l={};function i(p,s){return e(),n("div",null,s[0]||(s[0]=[t(`<h1 id="yarnpkg-shell" tabindex="-1"><a class="header-anchor" href="#yarnpkg-shell"><span><code>@yarnpkg/shell</code></span></a></h1><p>A JavaScript implementation of a bash-like shell (we use it in Yarn 2 to provide cross-platform scripting). This package exposes an API that abstracts both the parser and the interpreter; should you only need the parser you can check out <code>@yarnpkg/parsers</code>, but you probably won&#39;t need it.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>execute<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@yarnpkg/shell&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ls &quot;$0&quot; | wc -l</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li>Typechecked</li><li>Portable across systems</li><li>Supports custom JS builtins</li><li>Supports pipes</li><li>Supports glob patterns (<strong>only</strong> for files that exist on the filesystem: <code>ls *.txt</code>)</li><li>Supports logical operators</li><li>Supports subshells</li><li>Supports variables</li><li>Supports string manipulators</li><li>Supports argc/argv</li><li>Supports background jobs with color-coded output</li><li>Supports the most classic builtins</li><li>Doesn&#39;t necessarily need to access the fs</li></ul><h2 id="help-wanted" tabindex="-1"><a class="header-anchor" href="#help-wanted"><span>Help Wanted</span></a></h2><ul><li>Full glob support (<code>mv build/{index.js,index.build.js}</code>, <code>echo {foo,bar}</code>, <code>FOO=a,b echo {$FOO,x}</code>)</li><li>More string manipulators</li></ul><h2 id="non-goals" tabindex="-1"><a class="header-anchor" href="#non-goals"><span>Non-Goals</span></a></h2><ul><li>Perfect POSIX compliance (basic scripting is enough for now)</li><li>Multiline scripts (we mostly target one-liners)</li><li>Control structures (same reason)</li></ul>`,10)]))}const r=a(l,[["render",i],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/berry--yarnpkg-cli-4.5.1/berry--yarnpkg-cli-4.5.1/packages/yarnpkg-shell/","title":"@yarnpkg/shell","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"Help Wanted","slug":"help-wanted","link":"#help-wanted","children":[]},{"level":2,"title":"Non-Goals","slug":"non-goals","link":"#non-goals","children":[]}],"git":{},"filePathRelative":"berry--yarnpkg-cli-4.5.1/berry--yarnpkg-cli-4.5.1/packages/yarnpkg-shell/README.md"}');export{r as comp,c as data};
