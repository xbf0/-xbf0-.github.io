import{_ as s,o as a,c as p,a as e}from"./app-CNRroVhM.js";const t="/assets/pwm-Bn8N53Vs.png",l="/assets/freq6-DbZb2V1m.png",i="/assets/duty6-C_mRyjfb.png",c="/assets/pwm_capture-CpO9HMmS.png",o="/assets/%E4%BD%93%E9%9D%A2-DEab-eS1.png",u="/assets/adc-CUYcLYvs.png",r="/assets/adc2-UHJazNhU.png",d="/assets/rtc-Cd2hoHRw.png",v="/assets/iicr-BGG4S0CV.png",k="/assets/iic2-C3ffyX8U.png",m={};function b(_,n){return a(),p("div",null,n[0]||(n[0]=[e(`<h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span><strong>简介</strong></span></a></h3><p>针对我个人的记录，适用了解单片机的，可能存在有偏差的地方，欢迎大家指正。联系方式QQ：488763619</p><p>主频设置为 80Mhz</p><p>下面会介绍按键消抖，lcd，pwm,IC，rtc，adc，tim，iic,uart后续我想到新的还会继续添加</p><h2 id="_1-按键消抖" tabindex="-1"><a class="header-anchor" href="#_1-按键消抖"><span><strong>1.按键消抖</strong></span></a></h2><p><strong>只需要一个定时器</strong>，便可实现短按，长按，消抖。</p><p>定时器中断：按键按下开始计时，按键松开停止计时，判断按键按下的时间，确定短按长按</p><p>举例KEY1短按，KEY短按和长按2秒：</p><p>设置每1ms进入一次定时器中断——————主频80MHz,PSC=80 - 1,重装载1000 - 1.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/* key.c */</span>
<span class="line">uint8_t k1<span class="token punctuation">;</span></span>
<span class="line">uint16_t k2<span class="token punctuation">;</span></span>
<span class="line">void kn_add<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    if<span class="token punctuation">(</span>HAL_GPIO_ReadPin<span class="token punctuation">(</span>GPIOB,GPIO_PIN_0<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>k1++<span class="token punctuation">;</span></span>
<span class="line">    if<span class="token punctuation">(</span>k<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token number">200</span><span class="token punctuation">)</span>k1<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>                //确保K1不超过255且有效<span class="token punctuation">(</span><span class="token number">6</span><span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    if<span class="token punctuation">(</span>HAL_GPIO_ReadPin<span class="token punctuation">(</span>GPIOB,GPIO_PIN_1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>k2++<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/*  key.h  */</span>
<span class="line"><span class="token comment">#define   KEY1_PIN  HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)</span></span>
<span class="line"><span class="token comment">#define   KEY2_PIN  HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)</span></span>
<span class="line"></span>
<span class="line">/*** key.c ***/</span>
<span class="line">void get_key<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token assign-left variable">k1_flag</span><span class="token operator">=</span>key_pub<span class="token punctuation">(</span>k1,KEY1_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">k2_flag</span><span class="token operator">=</span>key_pub<span class="token punctuation">(</span>k2,KEY2_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">uint8_t key_pub<span class="token punctuation">(</span>uint16_t k,uint8_t PIN<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        if<span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">50</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;</span><span class="token number">2000</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>PIN<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">{</span>      //50ms~2000ms</span>
<span class="line">        <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token builtin class-name">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span>else if<span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">2000</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>PIN<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">{</span>      //<span class="token operator">&gt;</span>2000ms</span>
<span class="line">        <span class="token builtin class-name">return</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span>else <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key_run</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void key_run<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    k1_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    k2_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">void k1_run<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    if<span class="token punctuation">(</span>k1_flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token assign-left variable">k1_flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">k1</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    a++<span class="token punctuation">;</span>       //短按K1要进行的操作</span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">void k2_run<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    if<span class="token punctuation">(</span>k2_flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token assign-left variable">k2_flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">k2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    b++<span class="token punctuation">;</span>      //短按K2    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">        if<span class="token punctuation">(</span>k2_flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token assign-left variable">k2_flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">k2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      //长按k2  </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是整合函数</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void key_run<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    k1_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    k2_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void key_init<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>    //最终把这个函数放入定时器中断，key_init这个名字或许不合适</span>
<span class="line"></span>
<span class="line">    kn_add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    get_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    key_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我目前使用的，整洁，好管理，以后发现更好用的我会及时更新。</p><h2 id="_2-同时使用lcd和led时led乱闪-包括在定时器中使用" tabindex="-1"><a class="header-anchor" href="#_2-同时使用lcd和led时led乱闪-包括在定时器中使用"><span><strong>2.同时使用lcd和led时led乱闪(包括在定时器中使用)</strong></span></a></h2><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span><strong>原因</strong></span></a></h4><p>lcd和led共用io口</p><h4 id="解决步骤" tabindex="-1"><a class="header-anchor" href="#解决步骤"><span><strong>解决步骤</strong></span></a></h4><h4 id="_2-1-led" tabindex="-1"><a class="header-anchor" href="#_2-1-led"><span><strong>2.1 led</strong></span></a></h4><p>配置PD2为输出模式（锁存器）</p><p>每当设置led的状态前将PD2置高电平1，设置完成后将PD2置低电平0.</p><p>例如</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void led_init<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOC,GPIO_PIN_All,1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //全灭</span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-lcd" tabindex="-1"><a class="header-anchor" href="#_2-2-lcd"><span><strong><a href=""><span id="jump1">2.2 lcd</span></a></strong></span></a></h4><p>读取GPIOC-&gt;ODR寄存器，</p><p>操作lcd前<code>uint16_t temp = GPIOC-&gt;ODR;</code></p><p>操作完成后<code>GPIOC-&gt;ODR = temp；</code></p><p>由于操作lcd是用已经封装好的函数，所以直接修改用到的函数。</p><p>例如LCD_Init( );</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void LCD_Init<span class="token punctuation">(</span>void<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span> </span>
<span class="line">    uint16_t <span class="token assign-left variable">temp</span><span class="token operator">=</span>GPIOC-<span class="token operator">&gt;</span>ODR<span class="token punctuation">;</span>   //<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;</span></span>
<span class="line">    </span>
<span class="line">	LCD_CtrlLinesConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	dummy <span class="token operator">=</span> LCD_ReadReg<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	</span>
<span class="line">	</span>
<span class="line">	if<span class="token punctuation">(</span>dummy <span class="token operator">==</span> 0x8230<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		REG_8230_Init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	else<span class="token punctuation">{</span></span>
<span class="line">		REG_932X_Init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	dummy <span class="token operator">=</span> LCD_ReadReg<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	</span>
<span class="line">	</span>
<span class="line">    GPIOC-<span class="token operator">&gt;</span>ODR <span class="token operator">=</span>temp<span class="token punctuation">;</span>           //<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-经过以上操作后仍然乱闪" tabindex="-1"><a class="header-anchor" href="#_2-3-经过以上操作后仍然乱闪"><span><strong>2.3 经过以上操作后仍然乱闪</strong></span></a></h4><p>原因： 在定时器中断中操作led闪烁。lcd正在显示要操作gpioc,此时进入操作led的中断，把PD2 置1，就把led状态改变了，所以lcd和led不能同时操作。在定时器中单次操作led几乎不会出现led乱闪。</p><p>解决方法：只在定时器中断中只设置对应led的电平标志位，不操作led电平，在main.c的while（1）中根据标志位操作led电平。</p><p>例如：操作led1以0.1s为间隔切换亮灭</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/* 用于定时器中断中的函数 */</span>
<span class="line"></span>
<span class="line">void led1_flag<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    if<span class="token punctuation">(</span>led1_flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //led1_flag为满足led1准备工作条件，如KEY1短按后置1</span>
<span class="line">     led2_n++<span class="token punctuation">;</span></span>
<span class="line">    if<span class="token punctuation">(</span>led1_n<span class="token operator">&gt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     //0.1s 间隔</span>
<span class="line">    <span class="token assign-left variable">led1_n</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">led1_xx_flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      //控制led1亮灭的标志位</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>else <span class="token assign-left variable">led1_n</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/* 用于while<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> */</span>
<span class="line"></span>
<span class="line">void led1_show<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">if<span class="token punctuation">(</span>led1_xx_flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token assign-left variable">led1_xx_flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_TogglePin<span class="token punctuation">(</span>GPIOC,GPIO_PIN_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        //反转电平</span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span>else<span class="token punctuation">{</span>                                       //保证不工作是led1灭</span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOC,GPIO_PIN_8,1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以</strong>把操作led的电平代码封装为一个函数，这个我还没用过，我直接现写了</p><p>设置gpio电平函数：void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/* led.h */</span>
<span class="line"><span class="token comment">#define LED1 GPIO_PIN_8</span></span>
<span class="line"><span class="token comment">#define LED2 GPIO_PIN_9</span></span>
<span class="line"><span class="token comment">#define LED3 GPIO_PIN_10</span></span>
<span class="line"><span class="token comment">#define LED4 GPIO_PIN_11</span></span>
<span class="line"></span>
<span class="line">void ledn_fun<span class="token punctuation">(</span> uint16_t GPIO_Pin,GPIO_PinState PinState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/* led.c */</span>
<span class="line">void ledn_fun<span class="token punctuation">(</span> uint16_t GPIO_Pin,GPIO_PinState PinState<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">   HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOC,uint16_t GPIO_Pin, GPIO_PinState PinState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作led时</p><p>例如LED1亮</p><p>ledn_fun(LED1,0);</p><p>或者使用位操作</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void LED<span class="token punctuation">(</span>uint8_t led,uint8_t mode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    if<span class="token punctuation">(</span>mode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOC,GPIO_PIN_8 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>led - <span class="token number">1</span><span class="token punctuation">)</span>,GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOC,GPIO_PIN_8 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>led - <span class="token number">1</span><span class="token punctuation">)</span>,GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    HAL_GPIO_WritePin<span class="token punctuation">(</span>GPIOD,GPIO_PIN_2,GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我就不实操了，应该没问题。</p><h2 id="_3-lcd" tabindex="-1"><a class="header-anchor" href="#_3-lcd"><span><strong>3.LCD</strong></span></a></h2><p>使用lcd前要在<strong>while(1)上面，系统初始化下面</strong>初始化，后面使用lcd的函数要在while（1）中运行，如果在定时器中断中使用且进入中断的频率过高，会导致lcd显示异常。</p><p>所有操作lcd的函数都配置中<a href="#jump1">2.2 lcd</a>的设置</p><h4 id="_3-1-lcd初始化" tabindex="-1"><a class="header-anchor" href="#_3-1-lcd初始化"><span><strong>3.1 lcd初始化</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void lcd_show_init<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">LCD_Init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LCD_SetTextColor<span class="token punctuation">(</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LCD_SetBackColor<span class="token punctuation">(</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LCD_Clear<span class="token punctuation">(</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-显示" tabindex="-1"><a class="header-anchor" href="#_3-2-显示"><span><strong>3.2 显示</strong></span></a></h4><p>以行显示，注意Line0是第一行，Line1是第二行</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">char text<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//使用sprintf要引用<span class="token comment">#include &quot;stdio.h&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">//以行显示</span>
<span class="line">//第二行</span>
<span class="line">sprintf<span class="token punctuation">(</span>text,<span class="token string">&quot;        DATA        &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LCD_DisplayStringLine<span class="token punctuation">(</span>Line1, <span class="token punctuation">(</span>uint8_t *<span class="token punctuation">)</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">//第四行</span>
<span class="line">sprintf<span class="token punctuation">(</span>text,<span class="token string">&quot;     M=%d            &quot;</span>,m_val<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">LCD_DisplayStringLine<span class="token punctuation">(</span>Line3, <span class="token punctuation">(</span>uint8_t *<span class="token punctuation">)</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要显示汉字，需要用一个软件生成代码粘贴到font.h头文件中，之前我用过<strong>PCtoLCD2002字符取模软件</strong>。</p><h2 id="_4-pwm" tabindex="-1"><a class="header-anchor" href="#_4-pwm"><span><strong>4.PWM</strong></span></a></h2><h4 id="_4-1-pwm的产生" tabindex="-1"><a class="header-anchor" href="#_4-1-pwm的产生"><span><strong>4.1 pwm的产生</strong></span></a></h4><p>下图配置是最基本的pwm配置，可以产生可调pwm波，关于对pwm波的频率与占空比最好写一个函数，这样就不用每次都计算ARR（重装载值）和CCR（比较值）</p><p><img src="`+t+`" alt="89bbad53ca4708d65a05e1d297d80b2d"></p><p>调整pwm频率，占空比函数</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">uint16_t freq_old<span class="token punctuation">;</span></span>
<span class="line">uint8_t duty_old<span class="token punctuation">;</span></span>
<span class="line">void set_pwm<span class="token punctuation">(</span>TIM_HandleTypeDef htim,uint32_t Channel,uint32_t freq,uint16_t duty<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    uint16_t prescaler <span class="token operator">=</span> <span class="token number">80</span> - <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    uint64_t tim_clk_freq <span class="token operator">=</span> <span class="token number">80000000</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    float ARR <span class="token operator">=</span> tim_clk_freq/<span class="token punctuation">(</span>prescaler+1<span class="token punctuation">)</span>/freq - <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    float CCR <span class="token operator">=</span> duty *1.0/100*<span class="token punctuation">(</span>ARR + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    __HAL_TIM_SET_PRESCALER<span class="token punctuation">(</span><span class="token operator">&amp;</span>htim,prescaler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __HAL_TIM_SET_AUTORELOAD<span class="token punctuation">(</span><span class="token operator">&amp;</span>htim,<span class="token punctuation">(</span>uint32_t<span class="token punctuation">)</span>ARR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    __HAL_TIM_SET_COMPARE<span class="token punctuation">(</span><span class="token operator">&amp;</span>htim,Channel,<span class="token punctuation">(</span>uint16_t<span class="token punctuation">)</span>CCR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token assign-left variable">freq_old</span><span class="token operator">=</span>freq<span class="token punctuation">;</span></span>
<span class="line">    <span class="token assign-left variable">duty_old</span><span class="token operator">=</span>duty<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数中数据类型的选择是参考hal库中已有函数的输入或者cubemx中对应数据的位数。</p><p>如果用cubemx配置过预分频就不需要 <code>__HAL_TIM_SET_PRESCALER(&amp;htim,prescaler);</code>设置预分频。至于数据类型我想能用就行，没必要刚刚好，又不是造火箭哈哈。</p><p><strong>相关公式：</strong></p><p><img src="`+l+'" alt="89bbad53ca4708d65a05e1d297d80b2d"></p><p><img src="'+i+`" alt="89bbad53ca4708d65a05e1d297d80b2d"></p><p>根据这两个公式，易得</p><pre><code>float ARR = tim_clk_freq/(prescaler+1)/freq - 1;
float CCR = duty *1.0/100*(ARR + 1);
</code></pre><p>3个函数</p><pre><code>__HAL_TIM_SET_PRESCALER(&amp;htim,prescaler);
__HAL_TIM_SET_AUTORELOAD(&amp;htim,(uint16_t)ARR);
__HAL_TIM_SET_COMPARE(&amp;htim,Channel,(uint16_t)CCR);
</code></pre><p>prescaler : 预分频（PSC） AUTORELOAD : 重装载(ARR) COMPARE：比较值 （CCR）</p><p>至于下面的</p><pre><code>freq_old=freq;
duty_old=duty;
</code></pre><p>是用于获取当前参数，以及只需要改变一个参数时，另一个不需要改变的直接用freq_old或duty_old。</p><h4 id="_4-2-pwm的捕获" tabindex="-1"><a class="header-anchor" href="#_4-2-pwm的捕获"><span><strong>4.2 pwm的捕获</strong></span></a></h4><p>捕获pwm的占空比和频率，这个功能可以通过配置cubemx实现，不需要自己写捕获函数</p><p>用到一个io口定时器捕获pwm波，</p><p><img src="`+c+`" alt="8154534c844f9f33dd1f7c7ccec20da1"></p><p>配置好io口后开启捕获io口的中断和pwm的中断，然后在代码中初始化</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">  HAL_TIM_PWM_Start_IT<span class="token punctuation">(</span><span class="token operator">&amp;</span>htim2,TIM_CHANNEL_2<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  HAL_TIM_IC_Start_IT<span class="token punctuation">(</span><span class="token operator">&amp;</span>htim17,TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>捕获中断一定要开，但是pwm中断我不知道作用是什么，不设置pwm中断也可以正常捕获。</p></div><p><strong>捕获中断服务函数</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void HAL_TIM_IC_CaptureCallback<span class="token punctuation">(</span>TIM_HandleTypeDef *htim<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>htim-<span class="token operator">&gt;</span>Instance <span class="token operator">==</span> TIM17<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">value <span class="token operator">=</span> HAL_TIM_ReadCapturedValue<span class="token punctuation">(</span>htim, TIM_CHANNEL_1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">TIM17-<span class="token operator">&gt;</span>CNT<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token assign-left variable">freq</span><span class="token operator">=</span><span class="token number">80000000</span>/<span class="token punctuation">(</span>value*80<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个中断服务函数为上升沿触发，在上图Input Capture Channel 1 中的Polanty Selection 的默认配置Rising Edge更改为其他触发条件。</p><p>每捕获到一个上升沿，就读取该定时器的CCR。</p><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><p><strong>为什么读取CCR而不是CNT？</strong></p><p><strong>CCR与CNT的区别</strong></p><ul><li><strong>CNT（计数器值）</strong>：是定时器计数器的当前值，会随着时钟信号不断递增或递减。</li><li><strong>CCR（捕获比较寄存器值）</strong>：在输入捕获模式下，CCR会在捕获事件（如信号边沿）发生时，记录当前CNT的值。</li></ul><p><strong>为什么要读取CCR</strong></p><ul><li><strong>捕获事件的时间点</strong>：CCR记录了捕获事件发生时CNT的值，直接反映了信号边沿的时间点。<strong>如果直接读取CNT，可能会错过捕获事件的准确时间。</strong></li><li><strong>避免CNT的实时变化</strong>：CNT会随着时钟信号不断变化，直接读取CNT可能会导致值不准确。而CCR的值在捕获事件发生时被锁定，可以稳定地反映捕获时间。</li><li><strong>硬件自动记录</strong>：在输入捕获模式下，硬件会自动将CNT的值写入CCR，读取CCR可以简化软件逻辑</li></ul></details><p><strong>频率</strong></p><p>然后清零CNT，计算频率，主频除以预分频是当前定时器CNT增加的频率（1Mhz，每秒增加1M），然后除以value（经过一个完整的周期需要的CNT 值），得到每秒可以产生多少同样的pwm波从而得到频率。</p><p><strong>占空比</strong></p><p>至于占空比，我还没用过，我想需要设置上升沿和下降沿模式（Both Edges）的中断,进入中断时先判断IO口电平状态，如果是高电平就和之前的中断处理一样，记录 value，清空CNT,计算频率；如果是低电平就记录value_1（高电平的持续时间），不清空CNT。</p><p>然后将计算占空比的代码放在如果是高电平的if语句中，用value_1/value计算占空比。</p><p><strong>改进</strong></p><p>我想如果pwm频率过高而且实际需求对精度又不是特别高，可以把上面的中断服务函数代码更换为一个自己命名的函数然后放入定时器中断中，当然这种方法用来计算占空比仍然准确，用来计算频率可能需要特殊处理，比如在捕获中断内把CNT清零（上升沿模式）。</p><h2 id="_5-adc" tabindex="-1"><a class="header-anchor" href="#_5-adc"><span><strong>5.ADC</strong></span></a></h2><p>adc就是模数转换了（analog digital conversion），在传感器经常用到，在蓝桥杯中主要是测量电位器电压。</p><p>由于开启adc之后会产生大量数据，所以需要用到dma，但是只用dma的话相当于没用，因为使用adc或dma中断处理数据同样会占据cpu，所以又要用到定时器中断来处理数据，保证数据处理的频率不会过高。</p><p>综上，使用dma需要一个定时器中断和一个io采集adc，并且配置好dma。</p><h4 id="_5-1-配置adc" tabindex="-1"><a class="header-anchor" href="#_5-1-配置adc"><span><strong>5.1 配置</strong>adc</span></a></h4><p><strong>先配置处理数据的定时器</strong>，例如TIM4,按照下图配置参数好之后<strong>勾选中断打开</strong></p><p><img src="`+o+'" alt="b4f5b2f74d40df8d31680400c48b37c7"></p><p>每秒进入定时器中断（TIM4）10次。</p><p><strong>再配置adc</strong></p><p><img src="'+u+'" alt="857b1b230a6b871450e3a9732caaeb7d"></p><p><img src="'+r+`" alt="8ffe2a3e31b03203de87754d848d5ec0"></p><h4 id="_5-2-使用adc" tabindex="-1"><a class="header-anchor" href="#_5-2-使用adc"><span><strong>5.2 使用adc</strong></span></a></h4><p><strong>初始化</strong></p><p>在main函数中初始化dma</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">HAL_ADC_Start_DMA<span class="token punctuation">(</span><span class="token operator">&amp;</span>hadc2,<span class="token punctuation">(</span>uint32_t *<span class="token punctuation">)</span>r37_adc_buf,10<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中r37_adc_buf[10]，在main函数之前定义</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"> uint16_t r37_adc_buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在要处理数据的函数前或者文件内声明</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">extern uint16_t r37_adc_buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我不知道为什么要这么用，因为一般我用extern 都是在c文件定义变量，然后在头文件声明extern,最后在要用到这个变量的c文件的头文件内引用声明extern的头文件就行。可能因为这个涉及到初始化把。</p><p><strong>处理数据</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">extern uint16_t r37_adc_buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">float sum,average,r37_v<span class="token punctuation">;</span></span>
<span class="line">void r37_run<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token assign-left variable">sum</span><span class="token operator">+=</span>r37_adc_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  r37_adc_buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token assign-left variable">average</span><span class="token operator">=</span>sum/10<span class="token punctuation">;</span></span>
<span class="line">  <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token assign-left variable">r37_v</span><span class="token operator">=</span>average/4009*3.3<span class="token punctuation">;</span>   //4009是我把电位器旋到底在调试界面看到的average值</span>
<span class="line">  </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后把这个函数放入tim4的定时器中断函数中就可以实现对电位器电压的采集了。</p><h2 id="_6-rtc" tabindex="-1"><a class="header-anchor" href="#_6-rtc"><span>6.RTC</span></a></h2><p>real time clock(实时时钟)</p><p>用一个64位无符号数据类型。实现高精度计时，通过取模取余获取年，月，日，时，分，秒，毫秒。</p><p>使用cubemx可以快速实现。</p><p><img src="`+d+`" alt="b23846654c7b6b7f9a60d79163a77125"></p><p>其中闹钟中断和二进制显示可根据需求设置。</p><p>然后读取时间。</p><p>先定义一个rtc结构体<code>RTC_TimeTypeDef myTime = {0};</code></p><p>然后读取日期和时间，不能单独读取时间，需要先获取日期再获取时间</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">    HAL_RTC_GetDate<span class="token punctuation">(</span><span class="token operator">&amp;</span>hrtc, <span class="token operator">&amp;</span>myDate,RTC_FORMAT_BIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    HAL_RTC_GetTime<span class="token punctuation">(</span><span class="token operator">&amp;</span>hrtc, <span class="token operator">&amp;</span>myTime,RTC_FORMAT_BIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sprintf<span class="token punctuation">(</span>text,<span class="token string">&quot;      %2d:%2d:%2d         &quot;</span>,myTime.Hours,myTime.Minutes,myTime.Seconds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    LCD_DisplayStringLine<span class="token punctuation">(</span>Line3,<span class="token punctuation">(</span>uint8_t *<span class="token punctuation">)</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中断函数，在rtc中断头文件搜call，复制函数名，把中断B改为A。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void HAL_RTC_AlarmAEventCallback<span class="token punctuation">(</span>RTC_HandleTypeDef *hrtc<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    led_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于RTC我几乎没使用过，我知道的就这些。</p><h2 id="_7-iic" tabindex="-1"><a class="header-anchor" href="#_7-iic"><span><strong>7.iic</strong></span></a></h2><p>用于掉电不丢失读写eerom。</p><h4 id="_7-1-初始化" tabindex="-1"><a class="header-anchor" href="#_7-1-初始化"><span>7.1 <strong>初始化</strong></span></a></h4><p>给的资料里包含iic_hal未见，无需在cubemx上配置。</p><p>编写两个函数</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">void iic_write<span class="token punctuation">(</span>uint8_t addr, uint8_t dat<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	I2CStart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>0xa0<span class="token punctuation">)</span><span class="token punctuation">;</span>  //模式</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>   //地址</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">;</span>   //数据</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CStop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">    </span>
<span class="line">        </span>
<span class="line">	HAL_Delay<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //延迟（必须有）</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">uint8_t iic_read<span class="token punctuation">(</span>uint8_t addr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line">	I2CStart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>0xa0<span class="token punctuation">)</span><span class="token punctuation">;</span>   //模式</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>   //地址</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         </span>
<span class="line">	I2CStop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	</span>
<span class="line">	</span>
<span class="line">	I2CStart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	I2CSendByte<span class="token punctuation">(</span>0xa1<span class="token punctuation">)</span><span class="token punctuation">;</span>    //模式</span>
<span class="line">	I2CWaitAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	uint8_t dat <span class="token operator">=</span> I2CReceiveByte<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //写</span>
<span class="line">	I2CSendNotAck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //主机不应答 从机不再发数据</span>
<span class="line">	I2CStop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	     </span>
<span class="line">	</span>
<span class="line"></span>
<span class="line">    </span>
<span class="line">	<span class="token builtin class-name">return</span> dat<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写入</strong>：开启iic-&gt;发送写入模式0xa0（10100000）-&gt;等待应答-&gt;发送写入地址-&gt;等待应答-&gt;发送写入数据-&gt;等待应答-&gt;停止iic-&gt;阻塞式延迟20ms.</p><p><img src="`+v+'" alt="image-20250412175037788"></p><p><strong>读取</strong>：开启iic-&gt;发送写入模式0xa0（10100000）-&gt;等待应答-&gt;发送读取地址-&gt;等待应答-&gt;停止iic-&gt;开启iic-&gt;发送写入模式0xa1（10100001）-&gt;等待应答-&gt;获取地址数据-&gt;I2CSendNotAck()(主机不应答 从机不再发数据)-&gt;停止iic-&gt;return dat;</p><p><img src="'+k+`" alt="image-20250412175159783"></p><p>使用前先初始化，<strong>I2CInit();</strong></p><h4 id="_7-2-读写eerom" tabindex="-1"><a class="header-anchor" href="#_7-2-读写eerom"><span><strong>7.2 读写eerom</strong></span></a></h4><pre><code>           iic_write(3, 6);//地址0x03   数据6
           iic_write(0, 1);//地址0x00   数据1
</code></pre><p>​<br> ​ a_p=iic_read(0); // 读取0x00 ​ b_p=iic_read(1); //读取0x01</p><h2 id="_8-uart" tabindex="-1"><a class="header-anchor" href="#_8-uart"><span><strong>8.UART</strong></span></a></h2><p>串口通信注意统一波特率。</p><p>下面分享 <strong>保存数据并处理</strong> 和 <strong>重定向</strong></p><h4 id="_8-1-保存数据并处理" tabindex="-1"><a class="header-anchor" href="#_8-1-保存数据并处理"><span><strong>8.1</strong> <strong>保存数据并处理</strong></span></a></h4><p>串口配置就按一般的来，开个接收中断。再额外开启一个80MHz的定时器，只用于计数。</p><p><strong>接收中断回调函数</strong></p><pre><code>/* usart */
uint8_t rec_data;
uint8_t rec_flag;
uint8_t data[10];
uint8_t data_addr=1;  

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
if(huart-&gt;Instance==USART1){

TIM4-&gt;CNT=0;
rec_flag=1;
data[data_addr]=rec_data;
 data_addr++; 
    HAL_UART_Transmit(&amp;huart1,&amp;rec_data,1,1);
  HAL_UART_Receive_IT(&amp;huart1,&amp;rec_data,1);
 }
} 
</code></pre><p><strong>数据处理函数</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line">void uart_data_handle<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">if<span class="token punctuation">(</span>TIM4-<span class="token operator">&gt;</span>CNT<span class="token operator">&gt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   if<span class="token punctuation">(</span>rec_flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line">   <span class="token assign-left variable">rec_flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">   </span>
<span class="line">    //处理功能在这里实现。</span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    /* 清空缓冲区数组 */</span>
<span class="line">   <span class="token assign-left variable">data_addr</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      for<span class="token punctuation">(</span>uint8_t <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart); 在 stm32g4xx_hal_uart.h 中</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>1.接收中断回调中，<code>uint8_t data_addr=1;</code> 的初始值为1.不能为0。否则第一位数据无法正常接收，我也不知道为啥。</p><p>2.在mian函数之前开启接收中断 <code>HAL_UART_Receive_IT(&amp;huart1,&amp;rec_data,1);</code></p><p>3.接收的为字符数据，变换减去 ‘0’ 的 ASCII： <code>pas_t1=data[1]-&#39;0&#39;;</code> 4.根据实际需要更改data的大小。</p></div><p><strong>8.2 重定向</strong></p><p>重写printf中的fputc函数，向其中添加串口发送函数或者lcd显示函数。又或是像韦东山一样直接在fputc中操作寄存器。</p><p>这里的代码后面再加。</p>`,160)]))}const g=s(m,[["render",b],["__file","halkuzhonggezhongwaisheyongfa.html.vue"]]),I=JSON.parse('{"path":"/blogs/danpianji/halkuzhonggezhongwaisheyongfa.html","title":"HAL库主要用法（蓝桥杯stm32g4）","lang":"en-US","frontmatter":{"title":"HAL库主要用法（蓝桥杯stm32g4）","date":"2025-03-12T00:00:00.000Z","tags":["stm32"],"categories":["单片机"]},"headers":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"1.按键消抖","slug":"_1-按键消抖","link":"#_1-按键消抖","children":[]},{"level":2,"title":"2.同时使用lcd和led时led乱闪(包括在定时器中使用)","slug":"_2-同时使用lcd和led时led乱闪-包括在定时器中使用","link":"#_2-同时使用lcd和led时led乱闪-包括在定时器中使用","children":[]},{"level":2,"title":"3.LCD","slug":"_3-lcd","link":"#_3-lcd","children":[]},{"level":2,"title":"4.PWM","slug":"_4-pwm","link":"#_4-pwm","children":[]},{"level":2,"title":"5.ADC","slug":"_5-adc","link":"#_5-adc","children":[]},{"level":2,"title":"6.RTC","slug":"_6-rtc","link":"#_6-rtc","children":[]},{"level":2,"title":"7.iic","slug":"_7-iic","link":"#_7-iic","children":[]},{"level":2,"title":"8.UART","slug":"_8-uart","link":"#_8-uart","children":[]}],"git":{},"filePathRelative":"blogs/单片机/hal库中各种外设用法.md"}');export{g as comp,I as data};
